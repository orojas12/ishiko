commit 549ac3fd2b33642f4ebad5688c1c45d7e5fdd8d9
Author: Oscar Rojas <orojas12@outlook.com>
Date:   Thu Dec 21 00:29:06 2023 -0700

    change qualified name of root package

diff --git a/api/pom.xml b/api/pom.xml
index 3fb46dc..c4f4cca 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -1,62 +1,87 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>org.springframework.boot</groupId>
-        <artifactId>spring-boot-starter-parent</artifactId>
-        <version>3.1.5</version>
-        <relativePath/> <!-- lookup parent from repository -->
-    </parent>
-    <groupId>com.ishiko</groupId>
-    <artifactId>api</artifactId>
-    <version>0.0.1-SNAPSHOT</version>
-    <name>ishiko-api</name>
-    <description>Demo project for Spring Boot</description>
-    <properties>
-        <java.version>21</java.version>
-    </properties>
-    <dependencies>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.2.0</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>app.ishiko</groupId>
+	<artifactId>api</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>api</name>
+	<description>Authorization and resource server</description>
+	<properties>
+		<java.version>21</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-oauth2-authorization-server</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-test</artifactId>
+			<scope>test</scope>
+		</dependency>
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-data-jpa</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-web</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-validation</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-security</artifactId>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <scope>runtime</scope>
         </dependency>
+
+        <!-- https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api -->
         <dependency>
-            <groupId>org.springframework.security</groupId>
-            <artifactId>spring-security-oauth2-authorization-server</artifactId>
-            <version>1.1.3</version>
+            <groupId>jakarta.validation</groupId>
+            <artifactId>jakarta.validation-api</artifactId>
+            <version>3.1.0-M1</version>
         </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk18on -->
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-test</artifactId>
-            <scope>test</scope>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcpkix-jdk18on</artifactId>
+            <version>1.77</version>
         </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk18on -->
         <dependency>
-            <groupId>org.postgresql</groupId>
-            <artifactId>postgresql</artifactId>
-            <scope>runtime</scope>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcprov-jdk18on</artifactId>
+            <version>1.77</version>
         </dependency>
-    </dependencies>
+	</dependencies>
 
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.springframework.boot</groupId>
-                <artifactId>spring-boot-maven-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+			</plugin>
+		</plugins>
+	</build>
 
 </project>
diff --git a/api/run.sh b/api/run.sh
new file mode 100755
index 0000000..8dcc443
--- /dev/null
+++ b/api/run.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+export PUBLIC_KEY_PATH=/home/oscar/projects/ishiko/config/public.pem
+export PRIVATE_KEY_PATH=/home/oscar/projects/ishiko/config/private.pem
+
+./mvnw spring-boot:run
diff --git a/api/src/main/java/com/ishiko/api/IshikoApiApplication.java b/api/src/main/java/app/ishiko/api/IshikoApiApplication.java
similarity index 92%
rename from api/src/main/java/com/ishiko/api/IshikoApiApplication.java
rename to api/src/main/java/app/ishiko/api/IshikoApiApplication.java
index ae7ee96..fb83ec5 100644
--- a/api/src/main/java/com/ishiko/api/IshikoApiApplication.java
+++ b/api/src/main/java/app/ishiko/api/IshikoApiApplication.java
@@ -1,4 +1,4 @@
-package com.ishiko.api;
+package app.ishiko.api;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
diff --git a/api/src/main/java/app/ishiko/api/config/SecurityConfig.java b/api/src/main/java/app/ishiko/api/config/SecurityConfig.java
new file mode 100644
index 0000000..99d2f87
--- /dev/null
+++ b/api/src/main/java/app/ishiko/api/config/SecurityConfig.java
@@ -0,0 +1,215 @@
+package app.ishiko.api.config;
+
+import com.nimbusds.jose.jwk.JWKSet;
+import com.nimbusds.jose.jwk.RSAKey;
+import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
+import com.nimbusds.jose.jwk.source.JWKSource;
+import com.nimbusds.jose.proc.SecurityContext;
+import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
+import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
+import org.bouncycastle.openssl.PEMParser;
+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.Order;
+import org.springframework.http.HttpMethod;
+import org.springframework.http.MediaType;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.security.config.Customizer;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.core.userdetails.User;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.oauth2.core.AuthorizationGrantType;
+import org.springframework.security.oauth2.core.ClientAuthenticationMethod;
+import org.springframework.security.oauth2.core.oidc.OidcScopes;
+import org.springframework.security.oauth2.jwt.JwtDecoder;
+import org.springframework.security.oauth2.server.authorization.client.JdbcRegisteredClientRepository;
+import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;
+import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;
+import org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
+import org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;
+import org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;
+import org.springframework.security.oauth2.server.authorization.settings.ClientSettings;
+import org.springframework.security.oauth2.server.authorization.settings.TokenSettings;
+import org.springframework.security.provisioning.JdbcUserDetailsManager;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;
+import org.springframework.security.web.util.matcher.OrRequestMatcher;
+import org.springframework.security.web.util.matcher.RequestMatcher;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import javax.sql.DataSource;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.security.interfaces.RSAPrivateKey;
+import java.security.interfaces.RSAPublicKey;
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+
+@Configuration
+@EnableWebSecurity
+public class SecurityConfig {
+    private static RSAPublicKey readX509PublicKey(File file) throws IOException {
+        try (var keyReader = new FileReader(file)) {
+            var pemParser = new PEMParser(keyReader);
+            var converter = new JcaPEMKeyConverter();
+            SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfo.getInstance(pemParser.readObject());
+            return (RSAPublicKey) converter.getPublicKey(publicKeyInfo);
+        }
+    }
+
+    private static RSAPrivateKey readPKCS8PrivateKey(File file) throws IOException {
+        try (var keyReader = new FileReader(file)) {
+            var pemParser = new PEMParser(keyReader);
+            var converter = new JcaPEMKeyConverter();
+            PrivateKeyInfo privateKeyInfo = PrivateKeyInfo.getInstance(pemParser.readObject());
+            return (RSAPrivateKey) converter.getPrivateKey(privateKeyInfo);
+        }
+    }
+
+    @Bean
+    @Order(1)
+    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http)
+            throws Exception {
+        var authorizationServerConfigurer = new OAuth2AuthorizationServerConfigurer();
+        RequestMatcher endpointsMatcher = authorizationServerConfigurer.getEndpointsMatcher();
+
+        http
+                .securityMatcher(new OrRequestMatcher(
+                        new AntPathRequestMatcher(
+                                "/oauth2/authorize",
+                                HttpMethod.OPTIONS.name()),
+                        endpointsMatcher))
+                .cors(Customizer.withDefaults())
+                .authorizeHttpRequests(authorize -> authorize
+                        .requestMatchers(new AntPathRequestMatcher(HttpMethod.OPTIONS.name())).permitAll()
+                        .anyRequest().authenticated())
+                .csrf(csrf -> csrf.ignoringRequestMatchers(endpointsMatcher))
+                .apply(authorizationServerConfigurer);
+
+        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)
+                .oidc(Customizer.withDefaults()); // Enable OpenID Connect 1.0
+
+        http
+                // Redirect to the login page when not authenticated from the
+                // authorization endpoint
+                .exceptionHandling((exceptions) -> exceptions
+                        .defaultAuthenticationEntryPointFor(
+                                new LoginUrlAuthenticationEntryPoint("/login"),
+                                new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))
+                // Accept access tokens for User Info and/or Client Registration
+                .oauth2ResourceServer((resourceServer) -> resourceServer
+                        .jwt(Customizer.withDefaults()));
+        return http.build();
+    }
+
+    @Bean
+    @Order(2)
+    public SecurityFilterChain defaultSecurityFilterChain1(HttpSecurity http)
+            throws Exception {
+        http
+                .cors(Customizer.withDefaults())
+                .authorizeHttpRequests((authorize) -> authorize
+                        .anyRequest().authenticated())
+                .formLogin(Customizer.withDefaults());
+        return http.build();
+    }
+
+    @Bean
+    CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
+        configuration.setAllowedMethods(Arrays.asList("*"));
+        configuration.setAllowedHeaders(Arrays.asList("*"));
+        configuration.setAllowCredentials(true);
+        configuration.setMaxAge(600L);
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+        return source;
+    }
+
+    @Bean
+    public UserDetailsService userDetailsService(DataSource dataSource) {
+        var userDetailsManager = new JdbcUserDetailsManager(dataSource);
+
+        // TODO: remove before deploying
+        if (!userDetailsManager.userExists("oscar")) {
+            UserDetails userDetails = User.withDefaultPasswordEncoder()
+                    .username("oscar")
+                    .password("password")
+                    .roles("USER")
+                    .build();
+            userDetailsManager.createUser(userDetails);
+        }
+
+        return userDetailsManager;
+    }
+
+    @Bean
+    public RegisteredClientRepository registeredClientRepository(JdbcTemplate jdbcTemplate) {
+        var registeredClientRepository = new JdbcRegisteredClientRepository(jdbcTemplate);
+        RegisteredClient registeredClient = RegisteredClient.withId("client1")
+                .clientId("ishiko-client")
+                .clientSecret("{noop}secret")
+                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
+                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
+                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)
+                .redirectUri("http://localhost:3000/oidc/code")
+                .scopes(scopes -> scopes.addAll(List.of(
+                        OidcScopes.OPENID,
+                        OidcScopes.PROFILE,
+                        "messages")))
+                .tokenSettings(TokenSettings.builder()
+                        .accessTokenTimeToLive(Duration.ofSeconds(5))
+                        .refreshTokenTimeToLive(Duration.ofSeconds(5))
+                        .build())
+                .clientSettings(ClientSettings.builder()
+                        .requireAuthorizationConsent(false).requireProofKey(true).build())
+                .build();
+        registeredClientRepository.save(registeredClient);
+        return registeredClientRepository;
+    }
+
+    @Bean
+    public JWKSource<SecurityContext> jwkSource(
+            @Value("#{environment.PUBLIC_KEY_PATH}") String publicKeyPath,
+            @Value("#{environment.PRIVATE_KEY_PATH}") String privateKeyPath,
+            @Value("${oauth2.authorization-server.keyid}") String keyId) throws IOException {
+        RSAPublicKey publicKey = readX509PublicKey(new File(publicKeyPath));
+        RSAPrivateKey privateKey = readPKCS8PrivateKey(new File(privateKeyPath));
+        RSAKey rsaKey = new RSAKey.Builder(publicKey)
+                .privateKey(privateKey)
+                .keyID(keyId)
+                .build();
+        JWKSet jwkSet = new JWKSet(rsaKey);
+        return new ImmutableJWKSet<>(jwkSet);
+    }
+
+    @Bean
+    public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {
+        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);
+    }
+
+    @Bean
+    public AuthorizationServerSettings authorizationServerSettings() {
+        return AuthorizationServerSettings.builder()
+                .issuer("http://localhost:8080")
+                .authorizationEndpoint("/oauth2/authorize")
+                .jwkSetEndpoint("/.well-known/jwks.json")
+                .tokenEndpoint("/oauth2/token")
+                .oidcClientRegistrationEndpoint("/oidc/register")
+                .oidcLogoutEndpoint("/oidc/logout")
+                .oidcUserInfoEndpoint("/oidc/user-info")
+                .tokenRevocationEndpoint("/oauth2/revoke")
+                .build();
+    }
+}
diff --git a/api/src/main/java/com/ishiko/api/exceptions/HttpErrorResponseBodyDto.java b/api/src/main/java/app/ishiko/api/exceptions/HttpErrorResponseBodyDto.java
similarity index 89%
rename from api/src/main/java/com/ishiko/api/exceptions/HttpErrorResponseBodyDto.java
rename to api/src/main/java/app/ishiko/api/exceptions/HttpErrorResponseBodyDto.java
index 84bb102..34b6b4c 100644
--- a/api/src/main/java/com/ishiko/api/exceptions/HttpErrorResponseBodyDto.java
+++ b/api/src/main/java/app/ishiko/api/exceptions/HttpErrorResponseBodyDto.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.exceptions;
+package app.ishiko.api.exceptions;
 
 public class HttpErrorResponseBodyDto {
     private String message;
diff --git a/api/src/main/java/com/ishiko/api/exceptions/InvalidInputException.java b/api/src/main/java/app/ishiko/api/exceptions/InvalidInputException.java
similarity index 79%
rename from api/src/main/java/com/ishiko/api/exceptions/InvalidInputException.java
rename to api/src/main/java/app/ishiko/api/exceptions/InvalidInputException.java
index 1e28bfa..5c66045 100644
--- a/api/src/main/java/com/ishiko/api/exceptions/InvalidInputException.java
+++ b/api/src/main/java/app/ishiko/api/exceptions/InvalidInputException.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.exceptions;
+package app.ishiko.api.exceptions;
 
 public class InvalidInputException extends Exception {
     public InvalidInputException(String message) {
diff --git a/api/src/main/java/com/ishiko/api/exceptions/NotFoundException.java b/api/src/main/java/app/ishiko/api/exceptions/NotFoundException.java
similarity index 78%
rename from api/src/main/java/com/ishiko/api/exceptions/NotFoundException.java
rename to api/src/main/java/app/ishiko/api/exceptions/NotFoundException.java
index 6576314..c4c6b88 100644
--- a/api/src/main/java/com/ishiko/api/exceptions/NotFoundException.java
+++ b/api/src/main/java/app/ishiko/api/exceptions/NotFoundException.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.exceptions;
+package app.ishiko.api.exceptions;
 
 public class NotFoundException extends Exception {
     public NotFoundException(String message) {
diff --git a/api/src/main/java/com/ishiko/api/issue/controller/IssueController.java b/api/src/main/java/app/ishiko/api/issue/controller/IssueController.java
similarity index 83%
rename from api/src/main/java/com/ishiko/api/issue/controller/IssueController.java
rename to api/src/main/java/app/ishiko/api/issue/controller/IssueController.java
index fa037b1..fbd554b 100644
--- a/api/src/main/java/com/ishiko/api/issue/controller/IssueController.java
+++ b/api/src/main/java/app/ishiko/api/issue/controller/IssueController.java
@@ -1,11 +1,11 @@
-package com.ishiko.api.issue.controller;
+package app.ishiko.api.issue.controller;
 
-import com.ishiko.api.exceptions.HttpErrorResponseBodyDto;
-import com.ishiko.api.exceptions.InvalidInputException;
-import com.ishiko.api.exceptions.NotFoundException;
-import com.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
-import com.ishiko.api.issue.dto.IssueDto;
-import com.ishiko.api.issue.service.IssueService;
+import app.ishiko.api.exceptions.HttpErrorResponseBodyDto;
+import app.ishiko.api.exceptions.InvalidInputException;
+import app.ishiko.api.exceptions.NotFoundException;
+import app.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
+import app.ishiko.api.issue.dto.IssueDto;
+import app.ishiko.api.issue.service.IssueService;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.validation.Valid;
 import org.springframework.http.HttpStatus;
diff --git a/api/src/main/java/com/ishiko/api/issue/controller/IssueLabelController.java b/api/src/main/java/app/ishiko/api/issue/controller/IssueLabelController.java
similarity index 79%
rename from api/src/main/java/com/ishiko/api/issue/controller/IssueLabelController.java
rename to api/src/main/java/app/ishiko/api/issue/controller/IssueLabelController.java
index 1f05ca8..01edd72 100644
--- a/api/src/main/java/com/ishiko/api/issue/controller/IssueLabelController.java
+++ b/api/src/main/java/app/ishiko/api/issue/controller/IssueLabelController.java
@@ -1,7 +1,7 @@
-package com.ishiko.api.issue.controller;
+package app.ishiko.api.issue.controller;
 
-import com.ishiko.api.issue.dto.IssueLabelDto;
-import com.ishiko.api.issue.service.IssueService;
+import app.ishiko.api.issue.dto.IssueLabelDto;
+import app.ishiko.api.issue.service.IssueService;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
diff --git a/api/src/main/java/com/ishiko/api/issue/controller/IssueStatusController.java b/api/src/main/java/app/ishiko/api/issue/controller/IssueStatusController.java
similarity index 79%
rename from api/src/main/java/com/ishiko/api/issue/controller/IssueStatusController.java
rename to api/src/main/java/app/ishiko/api/issue/controller/IssueStatusController.java
index 19691d3..a046f5a 100644
--- a/api/src/main/java/com/ishiko/api/issue/controller/IssueStatusController.java
+++ b/api/src/main/java/app/ishiko/api/issue/controller/IssueStatusController.java
@@ -1,7 +1,7 @@
-package com.ishiko.api.issue.controller;
+package app.ishiko.api.issue.controller;
 
-import com.ishiko.api.issue.dto.IssueStatusDto;
-import com.ishiko.api.issue.service.IssueService;
+import app.ishiko.api.issue.dto.IssueStatusDto;
+import app.ishiko.api.issue.service.IssueService;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
diff --git a/api/src/main/java/com/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java b/api/src/main/java/app/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java
similarity index 94%
rename from api/src/main/java/com/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java
rename to api/src/main/java/app/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java
index bfb77f0..5133560 100644
--- a/api/src/main/java/com/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java
+++ b/api/src/main/java/app/ishiko/api/issue/dto/CreateOrUpdateIssueDto.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.dto;
+package app.ishiko.api.issue.dto;
 
 import jakarta.annotation.Nullable;
 import jakarta.validation.constraints.NotNull;
@@ -25,7 +25,8 @@ public class CreateOrUpdateIssueDto {
     public CreateOrUpdateIssueDto() {
     }
 
-    public CreateOrUpdateIssueDto(String subject, String description, @Nullable Instant dueDate, Integer status, Integer label) {
+    public CreateOrUpdateIssueDto(String subject, String description, @Nullable Instant dueDate, Integer status,
+            Integer label) {
         this.subject = subject;
         this.description = description;
         this.dueDate = dueDate;
diff --git a/api/src/main/java/com/ishiko/api/issue/dto/IssueDto.java b/api/src/main/java/app/ishiko/api/issue/dto/IssueDto.java
similarity index 95%
rename from api/src/main/java/com/ishiko/api/issue/dto/IssueDto.java
rename to api/src/main/java/app/ishiko/api/issue/dto/IssueDto.java
index 9c4acef..b53db71 100644
--- a/api/src/main/java/com/ishiko/api/issue/dto/IssueDto.java
+++ b/api/src/main/java/app/ishiko/api/issue/dto/IssueDto.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.dto;
+package app.ishiko.api.issue.dto;
 
 import jakarta.annotation.Nullable;
 import org.springframework.format.annotation.DateTimeFormat;
@@ -23,7 +23,7 @@ public class IssueDto {
     }
 
     public IssueDto(Integer id, String subject, String description, Instant createdDate, @Nullable Instant dueDate,
-                    IssueStatusDto status, IssueLabelDto label) {
+            IssueStatusDto status, IssueLabelDto label) {
         this.id = id;
         this.subject = subject;
         this.description = description;
diff --git a/api/src/main/java/com/ishiko/api/issue/dto/IssueLabelDto.java b/api/src/main/java/app/ishiko/api/issue/dto/IssueLabelDto.java
similarity index 93%
rename from api/src/main/java/com/ishiko/api/issue/dto/IssueLabelDto.java
rename to api/src/main/java/app/ishiko/api/issue/dto/IssueLabelDto.java
index 1471fc1..35b65d8 100644
--- a/api/src/main/java/com/ishiko/api/issue/dto/IssueLabelDto.java
+++ b/api/src/main/java/app/ishiko/api/issue/dto/IssueLabelDto.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.dto;
+package app.ishiko.api.issue.dto;
 
 public class IssueLabelDto {
     private Integer id = 1;
diff --git a/api/src/main/java/com/ishiko/api/issue/dto/IssueStatusDto.java b/api/src/main/java/app/ishiko/api/issue/dto/IssueStatusDto.java
similarity index 93%
rename from api/src/main/java/com/ishiko/api/issue/dto/IssueStatusDto.java
rename to api/src/main/java/app/ishiko/api/issue/dto/IssueStatusDto.java
index 0657c80..bb85b95 100644
--- a/api/src/main/java/com/ishiko/api/issue/dto/IssueStatusDto.java
+++ b/api/src/main/java/app/ishiko/api/issue/dto/IssueStatusDto.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.dto;
+package app.ishiko.api.issue.dto;
 
 public class IssueStatusDto {
     private Integer id = 1;
diff --git a/api/src/main/java/com/ishiko/api/issue/model/Issue.java b/api/src/main/java/app/ishiko/api/issue/model/Issue.java
similarity index 96%
rename from api/src/main/java/com/ishiko/api/issue/model/Issue.java
rename to api/src/main/java/app/ishiko/api/issue/model/Issue.java
index e7bfe75..4622e66 100644
--- a/api/src/main/java/com/ishiko/api/issue/model/Issue.java
+++ b/api/src/main/java/app/ishiko/api/issue/model/Issue.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.model;
+package app.ishiko.api.issue.model;
 
 import jakarta.annotation.Nullable;
 import jakarta.persistence.*;
@@ -40,7 +40,7 @@ public class Issue {
     }
 
     public Issue(Integer id, String subject, String description, Instant createdDate, @Nullable Instant dueDate,
-                 IssueStatus status, IssueLabel label) {
+            IssueStatus status, IssueLabel label) {
         this.id = id;
         this.subject = subject;
         this.description = description;
diff --git a/api/src/main/java/com/ishiko/api/issue/model/IssueLabel.java b/api/src/main/java/app/ishiko/api/issue/model/IssueLabel.java
similarity index 95%
rename from api/src/main/java/com/ishiko/api/issue/model/IssueLabel.java
rename to api/src/main/java/app/ishiko/api/issue/model/IssueLabel.java
index e0cba25..15feeb3 100644
--- a/api/src/main/java/com/ishiko/api/issue/model/IssueLabel.java
+++ b/api/src/main/java/app/ishiko/api/issue/model/IssueLabel.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.model;
+package app.ishiko.api.issue.model;
 
 import jakarta.persistence.*;
 
diff --git a/api/src/main/java/com/ishiko/api/issue/model/IssueStatus.java b/api/src/main/java/app/ishiko/api/issue/model/IssueStatus.java
similarity index 95%
rename from api/src/main/java/com/ishiko/api/issue/model/IssueStatus.java
rename to api/src/main/java/app/ishiko/api/issue/model/IssueStatus.java
index b38e58a..943dcee 100644
--- a/api/src/main/java/com/ishiko/api/issue/model/IssueStatus.java
+++ b/api/src/main/java/app/ishiko/api/issue/model/IssueStatus.java
@@ -1,4 +1,4 @@
-package com.ishiko.api.issue.model;
+package app.ishiko.api.issue.model;
 
 import jakarta.persistence.*;
 
diff --git a/api/src/main/java/com/ishiko/api/issue/repository/IssueLabelRepository.java b/api/src/main/java/app/ishiko/api/issue/repository/IssueLabelRepository.java
similarity index 63%
rename from api/src/main/java/com/ishiko/api/issue/repository/IssueLabelRepository.java
rename to api/src/main/java/app/ishiko/api/issue/repository/IssueLabelRepository.java
index 6613b8d..ce315cb 100644
--- a/api/src/main/java/com/ishiko/api/issue/repository/IssueLabelRepository.java
+++ b/api/src/main/java/app/ishiko/api/issue/repository/IssueLabelRepository.java
@@ -1,6 +1,6 @@
-package com.ishiko.api.issue.repository;
+package app.ishiko.api.issue.repository;
 
-import com.ishiko.api.issue.model.IssueLabel;
+import app.ishiko.api.issue.model.IssueLabel;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface IssueLabelRepository extends JpaRepository<IssueLabel, Integer> {
diff --git a/api/src/main/java/com/ishiko/api/issue/repository/IssueRepository.java b/api/src/main/java/app/ishiko/api/issue/repository/IssueRepository.java
similarity index 77%
rename from api/src/main/java/com/ishiko/api/issue/repository/IssueRepository.java
rename to api/src/main/java/app/ishiko/api/issue/repository/IssueRepository.java
index 8120ac9..cb9e237 100644
--- a/api/src/main/java/com/ishiko/api/issue/repository/IssueRepository.java
+++ b/api/src/main/java/app/ishiko/api/issue/repository/IssueRepository.java
@@ -1,6 +1,6 @@
-package com.ishiko.api.issue.repository;
+package app.ishiko.api.issue.repository;
 
-import com.ishiko.api.issue.model.Issue;
+import app.ishiko.api.issue.model.Issue;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
diff --git a/api/src/main/java/com/ishiko/api/issue/repository/IssueStatusRepository.java b/api/src/main/java/app/ishiko/api/issue/repository/IssueStatusRepository.java
similarity index 63%
rename from api/src/main/java/com/ishiko/api/issue/repository/IssueStatusRepository.java
rename to api/src/main/java/app/ishiko/api/issue/repository/IssueStatusRepository.java
index c5b5fec..e44fa53 100644
--- a/api/src/main/java/com/ishiko/api/issue/repository/IssueStatusRepository.java
+++ b/api/src/main/java/app/ishiko/api/issue/repository/IssueStatusRepository.java
@@ -1,6 +1,6 @@
-package com.ishiko.api.issue.repository;
+package app.ishiko.api.issue.repository;
 
-import com.ishiko.api.issue.model.IssueStatus;
+import app.ishiko.api.issue.model.IssueStatus;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface IssueStatusRepository extends JpaRepository<IssueStatus, Integer> {
diff --git a/api/src/main/java/com/ishiko/api/issue/service/IssueService.java b/api/src/main/java/app/ishiko/api/issue/service/IssueService.java
similarity index 82%
rename from api/src/main/java/com/ishiko/api/issue/service/IssueService.java
rename to api/src/main/java/app/ishiko/api/issue/service/IssueService.java
index 5268755..7361baf 100644
--- a/api/src/main/java/com/ishiko/api/issue/service/IssueService.java
+++ b/api/src/main/java/app/ishiko/api/issue/service/IssueService.java
@@ -1,17 +1,17 @@
-package com.ishiko.api.issue.service;
+package app.ishiko.api.issue.service;
 
-import com.ishiko.api.exceptions.InvalidInputException;
-import com.ishiko.api.exceptions.NotFoundException;
-import com.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
-import com.ishiko.api.issue.dto.IssueDto;
-import com.ishiko.api.issue.dto.IssueLabelDto;
-import com.ishiko.api.issue.dto.IssueStatusDto;
-import com.ishiko.api.issue.model.Issue;
-import com.ishiko.api.issue.model.IssueLabel;
-import com.ishiko.api.issue.model.IssueStatus;
-import com.ishiko.api.issue.repository.IssueLabelRepository;
-import com.ishiko.api.issue.repository.IssueRepository;
-import com.ishiko.api.issue.repository.IssueStatusRepository;
+import app.ishiko.api.exceptions.InvalidInputException;
+import app.ishiko.api.exceptions.NotFoundException;
+import app.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
+import app.ishiko.api.issue.dto.IssueDto;
+import app.ishiko.api.issue.dto.IssueLabelDto;
+import app.ishiko.api.issue.dto.IssueStatusDto;
+import app.ishiko.api.issue.model.Issue;
+import app.ishiko.api.issue.model.IssueLabel;
+import app.ishiko.api.issue.model.IssueStatus;
+import app.ishiko.api.issue.repository.IssueLabelRepository;
+import app.ishiko.api.issue.repository.IssueRepository;
+import app.ishiko.api.issue.repository.IssueStatusRepository;
 import org.springframework.stereotype.Service;
 
 import java.time.Instant;
@@ -26,7 +26,7 @@ public class IssueService {
     private final IssueLabelRepository issueLabelRepository;
 
     public IssueService(IssueRepository issueRepository, IssueStatusRepository issueStatusRepository,
-                        IssueLabelRepository issueLabelRepository) {
+            IssueLabelRepository issueLabelRepository) {
         this.issueRepository = issueRepository;
         this.issueStatusRepository = issueStatusRepository;
         this.issueLabelRepository = issueLabelRepository;
@@ -64,12 +64,14 @@ public class IssueService {
         Optional<IssueStatus> statusOptional = issueStatusRepository.findById(dto.getStatus());
         if (statusOptional.isPresent()) {
             issue.setStatus(statusOptional.get());
-        } else throw new InvalidInputException("Issue status '" + dto.getStatus() + "' is invalid");
+        } else
+            throw new InvalidInputException("Issue status '" + dto.getStatus() + "' is invalid");
         if (dto.getLabel() != null) {
             Optional<IssueLabel> labelOptional = issueLabelRepository.findById(dto.getLabel());
             if (labelOptional.isPresent()) {
                 issue.setLabel(labelOptional.get());
-            } else throw new InvalidInputException("Issue label '" + dto.getLabel() + "' is invalid");
+            } else
+                throw new InvalidInputException("Issue label '" + dto.getLabel() + "' is invalid");
         }
         Issue savedIssue = issueRepository.save(issue);
         return entityToDto(savedIssue);
@@ -100,7 +102,8 @@ public class IssueService {
             }
             Issue savedIssue = issueRepository.save(issue);
             return entityToDto(savedIssue);
-        } else throw new NotFoundException("Issue id '" + id + "' not found");
+        } else
+            throw new NotFoundException("Issue id '" + id + "' not found");
     }
 
     public void deleteIssue(int id) throws NotFoundException {
diff --git a/api/src/main/java/com/ishiko/api/config/SecurityConfig.java b/api/src/main/java/com/ishiko/api/config/SecurityConfig.java
deleted file mode 100644
index 79b5395..0000000
--- a/api/src/main/java/com/ishiko/api/config/SecurityConfig.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.ishiko.api.config;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.config.Customizer;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.oauth2.jwt.JwtDecoder;
-import org.springframework.security.oauth2.jwt.JwtDecoders;
-import org.springframework.security.web.SecurityFilterChain;
-
-@Configuration
-public class SecurityConfig {
-
-    @Bean
-    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
-        http.authorizeHttpRequests(authorize ->
-                authorize.anyRequest().authenticated()
-        );
-        http.oauth2ResourceServer(resourceServer ->
-                resourceServer.jwt(Customizer.withDefaults())
-        );
-        return http.build();
-    }
-
-    @Bean
-    public JwtDecoder decoder() {
-        return JwtDecoders.fromIssuerLocation("http://localhost:8080");
-    }
-}
-
diff --git a/api/src/main/resources/application-dev.properties b/api/src/main/resources/application-dev.properties
deleted file mode 100644
index cbb0056..0000000
--- a/api/src/main/resources/application-dev.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-spring.sql.init.mode=always
-spring.jpa.hibernate.ddl-auto=validate
-spring.datasource.url=jdbc:postgresql://localhost/ishiko
-spring.datasource.username=ishiko
-spring.datasource.password=ishiko
diff --git a/api/src/main/resources/application-prod.properties b/api/src/main/resources/application-prod.properties
deleted file mode 100644
index e69de29..0000000
diff --git a/api/src/main/resources/application.properties b/api/src/main/resources/application.properties
deleted file mode 100644
index af14453..0000000
--- a/api/src/main/resources/application.properties
+++ /dev/null
@@ -1 +0,0 @@
-spring.sql.init.mode=never
\ No newline at end of file
diff --git a/api/src/main/resources/application.yml b/api/src/main/resources/application.yml
new file mode 100644
index 0000000..deee1d9
--- /dev/null
+++ b/api/src/main/resources/application.yml
@@ -0,0 +1,19 @@
+server:
+  port: 8080
+
+logging:
+  level:
+    org.springframework.security: trace
+
+spring:
+  datasource:
+    url: jdbc:postgresql:dev
+    username: ishiko
+    password: ishiko
+  jpa:
+    hibernate:
+      ddl-auto: none
+
+oauth2:
+  authorization-server:
+    keyid: 216d75d6-1971-4ce7-9e90-89ed9080705c
diff --git a/api/src/test/java/com/ishiko/api/IshikoApiApplicationTests.java b/api/src/test/java/app/ishiko/api/ApiApplicationTests.java
similarity index 54%
rename from api/src/test/java/com/ishiko/api/IshikoApiApplicationTests.java
rename to api/src/test/java/app/ishiko/api/ApiApplicationTests.java
index 2ad1a88..ddf5393 100644
--- a/api/src/test/java/com/ishiko/api/IshikoApiApplicationTests.java
+++ b/api/src/test/java/app/ishiko/api/ApiApplicationTests.java
@@ -1,13 +1,13 @@
-package com.ishiko.api;
+package app.ishiko.api;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class IshikoApiApplicationTests {
+class ApiApplicationTests {
 
-    @Test
-    void contextLoads() {
-    }
+	@Test
+	void contextLoads() {
+	}
 
 }
diff --git a/api/src/test/java/com/ishiko/api/issue/IssueControllerTest.java b/api/src/test/java/com/ishiko/api/issue/IssueControllerTest.java
deleted file mode 100644
index e762411..0000000
--- a/api/src/test/java/com/ishiko/api/issue/IssueControllerTest.java
+++ /dev/null
@@ -1,214 +0,0 @@
-package com.ishiko.api.issue;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.ishiko.api.exceptions.InvalidInputException;
-import com.ishiko.api.exceptions.NotFoundException;
-import com.ishiko.api.issue.controller.IssueController;
-import com.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
-import com.ishiko.api.issue.dto.IssueDto;
-import com.ishiko.api.issue.dto.IssueLabelDto;
-import com.ishiko.api.issue.dto.IssueStatusDto;
-import com.ishiko.api.issue.service.IssueService;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.http.MediaType;
-import org.springframework.test.web.servlet.MockMvc;
-
-import java.time.Instant;
-import java.util.List;
-
-import static org.hamcrest.Matchers.is;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.*;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
-@WebMvcTest(IssueController.class)
-class IssueControllerTest {
-
-    @Autowired
-    private MockMvc mockMvc;
-
-    @Autowired
-    private ObjectMapper objectMapper;
-
-    @MockBean
-    private IssueService issueService;
-
-    @Test
-    void getIssues() throws Exception {
-        var dto = new IssueDto(1, "subject", "desc", Instant.now(), Instant.now(),
-                new IssueStatusDto(2, "status"), new IssueLabelDto(3, "label"));
-        List<IssueDto> issues = List.of(dto);
-        when(issueService.getIssues()).thenReturn(issues);
-        mockMvc.perform(get("/issue")).andExpectAll(
-                status().isOk(),
-                jsonPath("$[0].id", is(dto.getId())),
-                jsonPath("$[0].subject", is(dto.getSubject())),
-                jsonPath("$[0].description", is(dto.getDescription())),
-                jsonPath("$[0].createdDate", is(dto.getCreatedDate().toString())),
-                jsonPath("$[0].dueDate", is(dto.getDueDate().orElseThrow().toString())),
-                jsonPath("$[0].status.id", is(dto.getStatus().getId())),
-                jsonPath("$[0].status.name", is(dto.getStatus().getName())),
-                jsonPath("$[0].label.id", is(dto.getLabel().getId())),
-                jsonPath("$[0].label.name", is(dto.getLabel().getName()))
-        );
-    }
-
-    @Test
-    void getIssue_IssueId_ReturnsHttp200AndIssueData() throws Exception {
-        var dto = new IssueDto(1, "subject", "desc", Instant.now(), Instant.now(),
-                new IssueStatusDto(2, "status"), new IssueLabelDto(3, "label"));
-        when(issueService.getIssue(dto.getId())).thenReturn(dto);
-        mockMvc.perform(get("/issue/{id}", dto.getId())).andExpectAll(
-                status().isOk(),
-                jsonPath("$.id", is(dto.getId())),
-                jsonPath("$.subject", is(dto.getSubject())),
-                jsonPath("$.description", is(dto.getDescription())),
-                jsonPath("$.createdDate", is(dto.getCreatedDate().toString())),
-                jsonPath("$.dueDate", is(dto.getDueDate().orElseThrow().toString())),
-                jsonPath("$.status.id", is(dto.getStatus().getId())),
-                jsonPath("$.status.name", is(dto.getStatus().getName())),
-                jsonPath("$.label.id", is(dto.getLabel().getId())),
-                jsonPath("$.label.name", is(dto.getLabel().getName()))
-        );
-    }
-
-    @Test
-    void getIssue_NotFoundId_ReturnsHttp404AndErrorData() throws Exception {
-        int id = 1;
-        NotFoundException exc = new NotFoundException("not found");
-        when(issueService.getIssue(id)).thenThrow(exc);
-        mockMvc.perform(get("/issue/{id}", id)).andExpectAll(
-                status().isNotFound(),
-                jsonPath("$.message", is(exc.getMessage()))
-        );
-    }
-
-    @Test
-    void createIssue_CreateIssueDto_ReturnsHttp201AndCreatedData() throws Exception {
-        var createDto = new CreateOrUpdateIssueDto("subject", "desc", Instant.now(),
-                2, 3);
-        var issueDto = new IssueDto(1, createDto.getSubject(), createDto.getDescription(), Instant.now(),
-                createDto.getDueDate().orElse(null), new IssueStatusDto(createDto.getStatus(), "status"),
-                new IssueLabelDto(createDto.getLabel(), "label"));
-        String json = objectMapper.writeValueAsString(createDto);
-        when(issueService.createIssue(any())).thenReturn(issueDto);
-        mockMvc.perform(post("/issue").contentType(MediaType.APPLICATION_JSON).content(json))
-                .andExpectAll(
-                        status().isCreated(),
-                        jsonPath("$.id", is(issueDto.getId())),
-                        jsonPath("$.subject", is(issueDto.getSubject())),
-                        jsonPath("$.description", is(issueDto.getDescription())),
-                        jsonPath("$.createdDate", is(issueDto.getCreatedDate().toString())),
-                        jsonPath("$.dueDate", is(issueDto.getDueDate().orElseThrow().toString())),
-                        jsonPath("$.status.id", is(issueDto.getStatus().getId())),
-                        jsonPath("$.status.name", is(issueDto.getStatus().getName())),
-                        jsonPath("$.label.id", is(issueDto.getLabel().getId())),
-                        jsonPath("$.label.name", is(issueDto.getLabel().getName()))
-                );
-    }
-
-    @Test
-    void createIssue_InvalidCreateIssueDto_ReturnsHttp400AndErrorData() throws Exception {
-        var invalidDto = new CreateOrUpdateIssueDto(null, "desc", Instant.now(),
-                1, 3);
-        String json = objectMapper.writeValueAsString(invalidDto);
-        when(issueService.createIssue(any())).thenReturn(null);
-        mockMvc.perform(post("/issue").contentType(MediaType.APPLICATION_JSON).content(json))
-                .andExpectAll(
-                        status().isBadRequest()
-                );
-    }
-
-    @Test
-    void createIssue_CreateIssueDto_ReturnsHttp400AndErrorDataIfInvalidInputException() throws Exception {
-        var createDto = new CreateOrUpdateIssueDto("subject", "desc", Instant.now(),
-                2, 3);
-        var exc = new InvalidInputException("invalid");
-        String json = objectMapper.writeValueAsString(createDto);
-        when(issueService.createIssue(any())).thenThrow(exc);
-        mockMvc.perform(post("/issue").contentType(MediaType.APPLICATION_JSON).content(json))
-                .andExpectAll(
-                        status().isBadRequest(),
-                        jsonPath("$.message", is(exc.getMessage()))
-                );
-    }
-
-    @Test
-    void updateIssue_UpdateIssueDto_ReturnsHttp200AndUpdatedData() throws Exception {
-        int id = 1;
-        var updateDto = new CreateOrUpdateIssueDto("subject", "desc", Instant.now(),
-                2, 3);
-        var issueDto = new IssueDto(id, updateDto.getSubject(), updateDto.getDescription(), Instant.now(),
-                updateDto.getDueDate().orElse(null), new IssueStatusDto(updateDto.getStatus(), "status"),
-                new IssueLabelDto(updateDto.getLabel(), "label"));
-        String json = objectMapper.writeValueAsString(updateDto);
-        when(issueService.updateIssue(eq(issueDto.getId()), any())).thenReturn(issueDto);
-        mockMvc.perform(put("/issue/{id}", id).contentType(MediaType.APPLICATION_JSON)
-                        .content(json))
-                .andExpectAll(
-                        status().isOk(),
-                        jsonPath("$.id", is(issueDto.getId())),
-                        jsonPath("$.subject", is(issueDto.getSubject())),
-                        jsonPath("$.description", is(issueDto.getDescription())),
-                        jsonPath("$.createdDate", is(issueDto.getCreatedDate().toString())),
-                        jsonPath("$.dueDate", is(issueDto.getDueDate().orElseThrow().toString())),
-                        jsonPath("$.status.id", is(issueDto.getStatus().getId())),
-                        jsonPath("$.status.name", is(issueDto.getStatus().getName())),
-                        jsonPath("$.label.id", is(issueDto.getLabel().getId())),
-                        jsonPath("$.label.name", is(issueDto.getLabel().getName()))
-                );
-    }
-
-    @Test
-    void updateIssue_InvalidUpdateIssueDto_ReturnsHttp400AndErrorData() throws Exception {
-        int id = 1;
-        var invalidDto = new CreateOrUpdateIssueDto(null, "desc", Instant.now(),
-                1, 3);
-        String json = objectMapper.writeValueAsString(invalidDto);
-        when(issueService.updateIssue(eq(id), any())).thenReturn(null);
-        mockMvc.perform(put("/issue/{id}", id).contentType(MediaType.APPLICATION_JSON).content(json))
-                .andExpectAll(
-                        status().isBadRequest()
-                );
-    }
-
-    @Test
-    void updateIssue_UpdateIssueDto_ReturnsHttp400AndErrorDataIfInvalidInputException() throws Exception {
-        int id = 1;
-        var updateDto = new CreateOrUpdateIssueDto("subject", "desc", Instant.now(),
-                2, 3);
-        var exc = new InvalidInputException("invalid");
-        String json = objectMapper.writeValueAsString(updateDto);
-        when(issueService.updateIssue(eq(id), any())).thenThrow(exc);
-        mockMvc.perform(put("/issue/{id}", id).contentType(MediaType.APPLICATION_JSON).content(json))
-                .andExpectAll(
-                        status().isBadRequest(),
-                        jsonPath("$.message", is(exc.getMessage()))
-                );
-    }
-
-    @Test
-    void deleteIssue_IssueId_ReturnsHttp204() throws Exception {
-        int id = 1;
-        doNothing().when(issueService).deleteIssue(id);
-        mockMvc.perform(delete("/issue/{id}", id)).andExpectAll(
-                status().isNoContent()
-        );
-    }
-
-    @Test
-    void deleteIssue_NotFoundId_ReturnsHttp404AndErrorData() throws Exception {
-        int id = 1;
-        var exc = new NotFoundException("not found");
-        doThrow(exc).when(issueService).deleteIssue(id);
-        mockMvc.perform(delete("/issue/{id}", id)).andExpectAll(
-                status().isNotFound()
-        );
-    }
-}
\ No newline at end of file
diff --git a/api/src/test/java/com/ishiko/api/issue/IssueServiceTest.java b/api/src/test/java/com/ishiko/api/issue/IssueServiceTest.java
deleted file mode 100644
index 70757a1..0000000
--- a/api/src/test/java/com/ishiko/api/issue/IssueServiceTest.java
+++ /dev/null
@@ -1,227 +0,0 @@
-package com.ishiko.api.issue;
-
-import com.ishiko.api.exceptions.InvalidInputException;
-import com.ishiko.api.exceptions.NotFoundException;
-import com.ishiko.api.issue.dto.CreateOrUpdateIssueDto;
-import com.ishiko.api.issue.dto.IssueDto;
-import com.ishiko.api.issue.dto.IssueLabelDto;
-import com.ishiko.api.issue.dto.IssueStatusDto;
-import com.ishiko.api.issue.model.Issue;
-import com.ishiko.api.issue.model.IssueLabel;
-import com.ishiko.api.issue.model.IssueStatus;
-import com.ishiko.api.issue.repository.IssueLabelRepository;
-import com.ishiko.api.issue.repository.IssueRepository;
-import com.ishiko.api.issue.repository.IssueStatusRepository;
-import com.ishiko.api.issue.service.IssueService;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.time.Instant;
-import java.util.List;
-import java.util.Optional;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Mockito.*;
-
-@ExtendWith(MockitoExtension.class)
-public class IssueServiceTest {
-
-    @Mock
-    private IssueRepository issueRepository;
-    @Mock
-    private IssueStatusRepository statusRepository;
-    @Mock
-    private IssueLabelRepository labelRepository;
-
-    IssueService getIssueService() {
-        return new IssueService(issueRepository, statusRepository, labelRepository);
-    }
-
-    @Test
-    void getIssues_getsAllIssues() {
-        var issue = new Issue(1, "title", "desc", Instant.now(), null);
-        var status = new IssueStatus();
-        var label = new IssueLabel();
-        issue.setStatus(status);
-        issue.setLabel(label);
-        when(issueRepository.findAllByOrderByCreatedDateDesc()).thenReturn(
-                List.of(issue));
-        IssueService service = getIssueService();
-        List<IssueDto> issueDtoList = service.getIssues();
-        verify(issueRepository, times(1)).findAllByOrderByCreatedDateDesc();
-        assertThat(issueDtoList.size()).isEqualTo(1);
-    }
-
-    @Test
-    void getIssue_IssueId_getsIssueById() throws NotFoundException {
-        Issue issue = new Issue(1, "title", "desc", Instant.now(), null);
-        var status = new IssueStatus();
-        var label = new IssueLabel();
-        issue.setStatus(status);
-        issue.setLabel(label);
-        when(issueRepository.findById(issue.getId())).thenReturn(Optional.of(issue));
-        IssueService service = getIssueService();
-        IssueDto dto = service.getIssue(issue.getId());
-        verify(issueRepository, times(1)).findById(issue.getId());
-    }
-
-    @Test
-    void getIssue_NotFoundIssueId_throwsNotFoundException() {
-        var id = 1;
-        when(issueRepository.findById(id)).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.getIssue(1)).isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    void createIssue_CreateIssueDto_createsIssue() throws InvalidInputException {
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var status = new IssueStatus(dto.getStatus(), "");
-        var label = new IssueLabel(dto.getLabel(), "");
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.of(status));
-        when(labelRepository.findById(dto.getLabel())).thenReturn(Optional.of(label));
-        when(issueRepository.save(any())).thenAnswer(i -> i.getArguments()[0]);
-        ArgumentCaptor<Issue> arg = ArgumentCaptor.forClass(Issue.class);
-        IssueService service = getIssueService();
-        IssueDto createdIssueDto = service.createIssue(dto);
-        verify(issueRepository).save(arg.capture());
-        assertThat(arg.getValue().getSubject()).isEqualTo(dto.getSubject());
-        assertThat(arg.getValue().getDescription()).isEqualTo(dto.getDescription());
-        assertThat(arg.getValue().getDueDate()).isEqualTo(dto.getDueDate());
-        assertThat(arg.getValue().getStatus().getId()).isEqualTo(dto.getStatus());
-        assertThat(arg.getValue().getLabel().getId()).isEqualTo(dto.getLabel());
-    }
-
-    @Test
-    void createIssue_CreateIssueDtoWithInvalidStatus_throwsInvalidInputException() {
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var label = new IssueLabel(dto.getLabel(), "");
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.createIssue(dto)).isInstanceOf(InvalidInputException.class);
-    }
-
-    @Test
-    void createIssue_CreateIssueDtoWithInvalidLabel_throwsInvalidInputException() {
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var status = new IssueStatus(dto.getStatus(), "");
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.of(status));
-        when(labelRepository.findById(dto.getLabel())).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.createIssue(dto)).isInstanceOf(InvalidInputException.class);
-    }
-
-    @Test
-    void updateIssue_UpdateIssueDto_updatesIssue() throws NotFoundException, InvalidInputException {
-        int id = 1;
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var status = new IssueStatus(dto.getStatus(), "");
-        var label = new IssueLabel(dto.getLabel(), "");
-        var issue = new Issue();
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.of(status));
-        when(labelRepository.findById(dto.getLabel())).thenReturn(Optional.of(label));
-        when(issueRepository.findById(id)).thenReturn(Optional.of(issue));
-        when(issueRepository.save(issue)).thenAnswer(i -> i.getArguments()[0]);
-        ArgumentCaptor<Issue> arg = ArgumentCaptor.forClass(Issue.class);
-        IssueService service = getIssueService();
-        IssueDto createdIssueDto = service.updateIssue(id, dto);
-        verify(issueRepository).save(arg.capture());
-        assertThat(arg.getValue().getSubject()).isEqualTo(dto.getSubject());
-        assertThat(arg.getValue().getDescription()).isEqualTo(dto.getDescription());
-        assertThat(arg.getValue().getDueDate()).isEqualTo(dto.getDueDate());
-        assertThat(arg.getValue().getStatus().getId()).isEqualTo(dto.getStatus());
-        assertThat(arg.getValue().getLabel().getId()).isEqualTo(dto.getLabel());
-    }
-
-    @Test
-    void updateIssue_NotFoundId_throwsNotFoundException() {
-        int id = 1;
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        when(issueRepository.findById(id)).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.updateIssue(id, dto)).isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    void updateIssue_UpdateIssueDtoWithInvalidStatus_throwsInvalidInputException() {
-        int id = 1;
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var issue = new Issue();
-        when(issueRepository.findById(anyInt())).thenReturn(Optional.of(issue));
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.updateIssue(id, dto)).isInstanceOf(InvalidInputException.class);
-    }
-
-    @Test
-    void updateIssue_UpdateIssueDtoWithInvalidLabel_throwsInvalidInputException() {
-        int id = 1;
-        var dto = new CreateOrUpdateIssueDto("subject", "desc", null, 1, 2);
-        var issue = new Issue();
-        var status = new IssueStatus(dto.getStatus(), "");
-        when(issueRepository.findById(id)).thenReturn(Optional.of(issue));
-        when(statusRepository.findById(dto.getStatus())).thenReturn(Optional.of(status));
-        when(labelRepository.findById(dto.getLabel())).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.updateIssue(id, dto)).isInstanceOf(InvalidInputException.class);
-    }
-
-    @Test
-    void deleteIssue_IssueId_deletesIssue() throws NotFoundException {
-        var id = 1;
-        var issue = new Issue();
-        when(issueRepository.findById(id)).thenReturn(Optional.of(issue));
-        IssueService service = getIssueService();
-        service.deleteIssue(id);
-        verify(issueRepository).delete(issue);
-    }
-
-    @Test
-    void deleteIssue_NotFoundId_throwsNotFoundException() {
-        var id = 1;
-        when(issueRepository.findById(id)).thenReturn(Optional.empty());
-        IssueService service = getIssueService();
-        assertThatThrownBy(() -> service.deleteIssue(id)).isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    void entityToDto_Issue_returnsDtoWithSameData() {
-        var status = new IssueStatus(1, "status");
-        var label = new IssueLabel(2, "label");
-        var issue = new Issue(3, "subject", "desc", Instant.now(), null, status, label);
-        IssueService service = getIssueService();
-        IssueDto dto = service.entityToDto(issue);
-        assertThat(dto.getId()).isEqualTo(issue.getId());
-        assertThat(dto.getSubject()).isEqualTo(issue.getSubject());
-        assertThat(dto.getDescription()).isEqualTo(issue.getDescription());
-        assertThat(dto.getCreatedDate()).isEqualTo(issue.getCreatedDate());
-        assertThat(dto.getDueDate()).isEqualTo(issue.getDueDate());
-        assertThat(dto.getStatus().getId()).isEqualTo(status.getId());
-        assertThat(dto.getStatus().getName()).isEqualTo(status.getName());
-        assertThat(dto.getLabel().getId()).isEqualTo(label.getId());
-        assertThat(dto.getLabel().getName()).isEqualTo(label.getName());
-    }
-
-    @Test
-    void entityToDto_IssueStatus_returnsDtoWithSameData() {
-        var status = new IssueStatus(1, "status");
-        IssueService service = getIssueService();
-        IssueStatusDto dto = service.entityToDto(status);
-        assertThat(dto.getId()).isEqualTo(status.getId());
-        assertThat(dto.getName()).isEqualTo(status.getName());
-    }
-
-    @Test
-    void entityToDto_IssueLabel_returnsDtoWithSameData() {
-        var label = new IssueLabel(1, "label");
-        IssueService service = getIssueService();
-        IssueLabelDto dto = service.entityToDto(label);
-        assertThat(dto.getId()).isEqualTo(label.getId());
-        assertThat(dto.getName()).isEqualTo(label.getName());
-    }
-}
diff --git a/api/src/test/resources/application-test.properties b/api/src/test/resources/application-test.properties
deleted file mode 100644
index e69de29..0000000
